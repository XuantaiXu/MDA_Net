# encoding: utf-8
"""
    弱监督学习分割模型预测
    编写时间：2020.12.01
    说明：
        局部数据块的测试
"""

import torch as t
import math
from torch import nn
from model.unet3D_sigmoid import UnetGenerator_3d
import numpy as np
import SimpleITK as sitk
import os
import time
from torch.autograd import Variable
from util import *
from scipy.ndimage.interpolation import zoom
import matplotlib.pyplot as plt

imgPath = '/lustre/FeaturedData/Public/zhangjianmin/BYLW/test_data/montage'                       # 需要预测的数据块路径
outputPath = '/lustre/FeaturedData/Public/zhangjianmin/BYLW/test_data/predict'
modelPath = '/lustre/FeaturedData/Public/zhangjianmin/BYLW/train_data/192420_195225_focalLoss_sigmoid/model/CP99.pth'              # 训练好的模型
block_size = [100, 100, 100]                       # change 数据块的大小  数值：x,y,z
z_pixel = 2

def mkdir_file():
    # 创建predict的子文件夹
    predict_img = outputPath + '/' + 'image'
    if not os.path.exists(predict_img):
        os.makedirs(predict_img)
    predict_swc = outputPath + '/' + 'swc'
    if not os.path.exists(predict_swc):
        os.makedirs(predict_swc)
        print('创建文件夹完成')

def get_image_block(block_num, img, block_size=[128, 128, 128]):
    a, b, c = img.GetSize()
    x, y, z = int(a/block_size[0]), int(b/block_size[1]), int(c/block_size[2])
    z_num, xy_num = int(block_num/(x*y)), int(block_num%(x*y))
    x_num, y_num = int(xy_num%x), int(xy_num/x)
    img_block = img[x_num*block_size[0]: (x_num+1)*block_size[0], y_num*block_size[1]: (y_num+1)*block_size[1], z_num*block_size[2]: (z_num+1)*block_size[2]]
    img_arr = sitk.GetArrayFromImage(img_block)
    img_arr = img_arr.astype(np.uint8)
    img_arr = t.from_numpy(img_arr)
    print(img_arr.shape)
    # 将图像数据转换为张量
    img_arr_1 = t.zeros(1, 1, block_size[0], block_size[1], block_size[2])
    print(img_arr_1.shape)
    img_arr_1[0, 0, :, :, :] = img_arr

    return img_arr_1


class test(object):
    def __init__(self, model, img):
        self.model = model
        self.img = img

        self.zPixel, self.xPixel, self.yPixel = img.shape          # a, b, c
        self.pred = np.zeros((self.zPixel, self.xPixel, self.yPixel))  # 网络输出图像
        self.model = model


    def eval(self):
        if self.zPixel == 128:
            num = 1
        else:
            num = self.numOfSegment()        # 分割数据块个数

        for id in range(num):
            img, region = self.regionOfSegment(id)
            output = t.sigmoid(self.model(img)) * 255
            output = output.data.cpu().data.numpy()
            img_pred = output[0, 0, :, :, :]
            img_pred = img_pred
            # self.pred[region[0]: region[1], region[2]:region[3], region[4]:region[5]] += img_pred     # 拼接预测结果
            A = self.pred[region[0]: region[1], region[2]:region[3], region[4]:region[5]]
            self.pred[region[0]: region[1], region[2]:region[3], region[4]:region[5]] = np.where(A > img_pred, A, img_pred)
        output = self.pred[:self.zPixel, :self.yPixel, :self.yPixel]
        np.clip(output, 0, 255)

        return output

    def numOfSegment(self):
        """分割图像个数"""
        x = math.ceil(self.zPixel / 114)
        y = math.ceil(self.xPixel / 114)
        z = math.ceil(self.yPixel / 114)
        num = x * y * z

        return num

    def regionOfSegment(self, id):
        """分割图像范围, 处理数据大小非128倍数的数据"""
        x = math.ceil(self.zPixel / 114)
        y = math.ceil(self.xPixel / 114)
        z = math.ceil(self.yPixel / 114)

        z_num, xy_num = math.floor(id / (x * y)), int(id % (x * y))
        x_num, y_num = int(xy_num % x), math.floor(xy_num / x)

        if x_num == x-1:
            x1 = self.zPixel - 128
            x2 = self.zPixel
        else:
            x1 = x_num * block_size[0]
            x2 = x1 + 128
        if y_num == y-1:
            y1 = self.xPixel - 128
            y2 = self.xPixel
        else:
            y1 = y_num * block_size[1]
            y2 = y1 + 128
        if z_num == z-1:
            z1 = self.yPixel - 128
            z2 = self.yPixel
        else:
            z1 = z_num * block_size[2]
            z2 = z1 + 128
        img = self.img[x1: x2, y1:y2, z1:z2] 
        img = t.from_numpy(img)       # 将图像数据转换为张量
        img_tensor = t.zeros(1, 1, 128, 128, 128)
        img_tensor[0, 0, :, :, :] = img
        img_tensor = Variable(img_tensor.cuda())

        return img_tensor, [x1, x2, y1, y2, z1, z2]


def GetBlockNum(a, b, c):

    x = math.ceil(a / 128)
    y = math.ceil(b / 128)
    z = math.ceil(c / 128)

    return x*y*z

def zScore(img):
    mean = ndimage.mean(img)
    var = ndimage.variance(img)
    out = (img - mean) / var

    return out

def ReadImg(img_path):
    img = sitk.ReadImage(img_path)  # change
    img_arr = sitk.GetArrayFromImage(img)
    img_arr[img_arr == 0] = 235
    # img_arr = zScore(img_arr)
    return img_arr

def WriteImg(img, predict_path):
    # img = img * 255
    output_8bit = img.astype(np.uint8)
    img = sitk.GetImageFromArray(output_8bit)  # sitk.WriteImage支持的数据类型是8位
    sitk.WriteImage(img, predict_path)  # change

if __name__=='__main__':
    mkdir_file()  # 创建保存结果文件夹

    model = UnetGenerator_3d(in_dim=1, out_dim=1, num_filter=4).cuda()
    model.load_state_dict(t.load(modelPath, map_location=lambda storage, loc: storage))  # change

    imgList = os.listdir(imgPath)
    for name in imgList:

        start = time.time()
        img_path = imgPath + os.sep + name

        ## 读取图像
        img = ReadImg(img_path)
        pred = test(model, img).eval()
        predict_path = outputPath + '/image/' + name
        WriteImg(pred, predict_path)
        threshold = [100]
        print("cost time；  ", time.time()-start)
        for th in threshold:
            img_b = binarization(pred, th=th)
            name_1 = name.split('.')[0]
            centroid = LocationCell_with_fibre(img_b)
            swc_path = outputPath + '/swc/' + os.sep + name_1 + '.swc'

            output_swc(centroid, swc_path=swc_path, z_pixel=z_pixel)
            print("============={} saved!=======".format(name_1))
        print("cost time；  ", time.time()-start)





